#ifndef EVALUATION_HPP
#define EVALUATION_HPP

#include "typedefs.hpp"
#include "Square.hpp"

//http://chessprogramming.wikispaces.com/Simplified+evaluation+function
class PieceSquareTable {
    typedef ::Index<7, piece_type_t> Index;

public:
    typedef unsigned char _t;
    Index::array< Square::array<_t> > pst;

    static constexpr _t e(unsigned m, signed s) { return static_cast<_t>((m + s) / 5); }

public:
    constexpr PieceSquareTable () : pst {{
        {
            e(900,-20),e(900,-10),e(900,-10),e(900, -5),e(900, -5),e(900,-10),e(900,-10),e(900,-20),
            e(900,-10),e(900,  0),e(900,  0),e(900,  0),e(900,  0),e(900,  0),e(900,  0),e(900,-10),
            e(900,-10),e(900,  0),e(900,  5),e(900,  5),e(900,  5),e(900,  5),e(900,  0),e(900,-10),
            e(900, -5),e(900,  0),e(900,  5),e(900,  5),e(900,  5),e(900,  5),e(900,  0),e(900, -5),
            e(900,  0),e(900,  0),e(900,  5),e(900,  5),e(900,  5),e(900,  5),e(900,  0),e(900, -5),
            e(900,-10),e(900,  5),e(900,  5),e(900,  5),e(900,  5),e(900,  5),e(900,  0),e(900,-10),
            e(900,-10),e(900,  0),e(900,  5),e(900,  0),e(900,  0),e(900,  0),e(900,  0),e(900,-10),
            e(900,-20),e(900,-10),e(900,-10),e(900, -5),e(900, -5),e(900,-10),e(900,-10),e(900,-20)
        },
        {
            e(500,  0),e(500,  0),e(500,  0),e(500,  0),e(500,  0),e(500,  0),e(500,  0),e(500,  0),
            e(500,  5),e(500, 10),e(500, 10),e(500, 10),e(500, 10),e(500, 10),e(500, 10),e(500,  5),
            e(500, -5),e(500,  0),e(500,  0),e(500,  0),e(500,  0),e(500,  0),e(500,  0),e(500, -5),
            e(500, -5),e(500,  0),e(500,  0),e(500,  0),e(500,  0),e(500,  0),e(500,  0),e(500, -5),
            e(500, -5),e(500,  0),e(500,  0),e(500,  0),e(500,  0),e(500,  0),e(500,  0),e(500, -5),
            e(500, -5),e(500,  0),e(500,  0),e(500,  0),e(500,  0),e(500,  0),e(500,  0),e(500, -5),
            e(500, -5),e(500,  0),e(500,  0),e(500,  0),e(500,  0),e(500,  0),e(500,  0),e(500, -5),
            e(500,  0),e(500,  0),e(500,  0),e(500,  5),e(500,  5),e(500,  0),e(500,  0),e(500,  0)
        },
        {
            e(330,-20),e(330,-10),e(330,-10),e(330,-10),e(330,-10),e(330,-10),e(330,-10),e(330,-20),
            e(330,-10),e(330,  0),e(330,  0),e(330,  0),e(330,  0),e(330,  0),e(330,  0),e(330,-10),
            e(330,-10),e(330,  0),e(330,  5),e(330, 10),e(330, 10),e(330,  5),e(330,  0),e(330,-10),
            e(330,-10),e(330,  5),e(330,  5),e(330, 10),e(330, 10),e(330,  5),e(330,  5),e(330,-10),
            e(330,-10),e(330,  0),e(330, 10),e(330, 10),e(330, 10),e(330, 10),e(330,  0),e(330,-10),
            e(330,-10),e(330, 10),e(330, 10),e(330, 10),e(330, 10),e(330, 10),e(330, 10),e(330,-10),
            e(330,-10),e(330,  5),e(330,  0),e(330,  0),e(330,  0),e(330,  0),e(330,  5),e(330,-10),
            e(330,-20),e(330,-10),e(330,-10),e(330,-10),e(330,-10),e(330,-10),e(330,-10),e(330,-20)
        },
        {
            e(320,-50),e(320,-40),e(320,-30),e(320,-30),e(320,-30),e(320,-30),e(320,-40),e(320,-50),
            e(320,-40),e(320,-20),e(320,  0),e(320,  0),e(320,  0),e(320,  0),e(320,-20),e(320,-40),
            e(320,-30),e(320,  0),e(320, 10),e(320, 15),e(320, 15),e(320, 10),e(320,  0),e(320,-30),
            e(320,-30),e(320,  5),e(320, 15),e(320, 20),e(320, 20),e(320, 15),e(320,  5),e(320,-30),
            e(320,-30),e(320,  0),e(320, 15),e(320, 20),e(320, 20),e(320, 15),e(320,  0),e(320,-30),
            e(320,-30),e(320,  5),e(320, 10),e(320, 15),e(320, 15),e(320, 10),e(320,  5),e(320,-30),
            e(320,-40),e(320,-20),e(320,  0),e(320,  5),e(320,  5),e(320,  0),e(320,-20),e(320,-40),
            e(320,-50),e(320,-40),e(320,-30),e(320,-30),e(320,-30),e(320,-30),e(320,-40),e(320,-50)
        },
        {
            e(100,  0),e(100,  0),e(100,  0),e(100,  0),e(100,  0),e(100,  0),e(100,  0),e(100,  0),
            e(100, 50),e(100, 50),e(100, 50),e(100, 50),e(100, 50),e(100, 50),e(100, 50),e(100, 50),
            e(100, 10),e(100, 10),e(100, 20),e(100, 30),e(100, 30),e(100, 20),e(100, 10),e(100, 10),
            e(100,  5),e(100,  5),e(100, 10),e(100, 25),e(100, 25),e(100, 10),e(100,  5),e(100,  5),
            e(100,  0),e(100,  0),e(100,  0),e(100, 20),e(100, 20),e(100,  0),e(100,  0),e(100,  0),
            e(100,  5),e(100, -5),e(100,-10),e(100,  0),e(100,  0),e(100,-10),e(100, -5),e(100,  5),
            e(100,  5),e(100, 10),e(100, 10),e(100,-20),e(100,-20),e(100, 10),e(100, 10),e(100,  5),
            e(100,  0),e(100,  0),e(100,  0),e(100,  0),e(100,  0),e(100,  0),e(100,  0),e(100,  0)
        },
        {
            e(100,-30),e(100,-40),e(100,-40),e(100,-50),e(100,-50),e(100,-40),e(100,-40),e(100,-30),
            e(100,-30),e(100,-40),e(100,-40),e(100,-50),e(100,-50),e(100,-40),e(100,-40),e(100,-30),
            e(100,-30),e(100,-40),e(100,-40),e(100,-50),e(100,-50),e(100,-40),e(100,-40),e(100,-30),
            e(100,-30),e(100,-40),e(100,-40),e(100,-50),e(100,-50),e(100,-40),e(100,-40),e(100,-30),
            e(100,-20),e(100,-30),e(100,-30),e(100,-40),e(100,-40),e(100,-30),e(100,-30),e(100,-20),
            e(100,-10),e(100,-20),e(100,-20),e(100,-20),e(100,-20),e(100,-20),e(100,-20),e(100,-10),
            e(100, 20),e(100, 20),e(100,  0),e(100,  0),e(100,  0),e(100,  0),e(100, 20),e(100, 20),
            e(100, 20),e(100, 30),e(100, 10),e(100,  0),e(100,  0),e(100, 10),e(100, 30),e(100, 20)
        },
        {
            e(100,-50),e(100,-40),e(100,-30),e(100,-20),e(100,-20),e(100,-30),e(100,-40),e(100,-50),
            e(100,-30),e(100,-20),e(100,-10),e(100,  0),e(100,  0),e(100,-10),e(100,-20),e(100,-30),
            e(100,-30),e(100,-10),e(100, 20),e(100, 30),e(100, 30),e(100, 20),e(100,-10),e(100,-30),
            e(100,-30),e(100,-10),e(100,-40),e(100,-50),e(100,-50),e(100,-40),e(100,-40),e(100,-30),
            e(100,-30),e(100,-10),e(100,-30),e(100,-40),e(100,-40),e(100,-30),e(100,-30),e(100,-30),
            e(100,-30),e(100,-10),e(100,-20),e(100,-20),e(100,-20),e(100,-20),e(100,-20),e(100,-30),
            e(100,-30),e(100,-30),e(100,  0),e(100,  0),e(100,  0),e(100,  0),e(100,-30),e(100,-30),
            e(100,-50),e(100,-30),e(100,-30),e(100,-30),e(100,-30),e(100,-30),e(100,-30),e(100,-50)
        }
    }}
    {}

    constexpr const _t& operator() (Index::_t ty, Square sq) const { return pst[ty][sq]; }
};

class Evaluation {
    static const PieceSquareTable pst;

public:
    typedef index_t _t;

private:
    _t _v;

public:
    Evaluation () : _v{} {}
    Evaluation (const Evaluation& e) : _v{e} {}
    explicit operator _t () const { return _v; }
    void clear() { _v = 0; }

    void drop(PieceType::_t ty, Square to) { _v += pst(ty, to); }
    void clear(PieceType::_t ty, Square from) { _v -= pst(ty, from); }

    void move(PieceType::_t ty, Square from, Square to) {
        clear(ty, from);
        drop(ty, to);
    }

    void promote(Square from, Square to, PromoType::_t ty) {
        assert (from.is(Rank7) && to.is(Rank8));
        clear(Pawn, from);
        drop(ty, to);
    }

};

#endif
