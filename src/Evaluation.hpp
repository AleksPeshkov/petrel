#ifndef EVALUATION_HPP
#define EVALUATION_HPP

#include "Index.hpp"
#include "Square.hpp"

#define E(x, y) (((x)+(y))/5)

//http://chessprogramming.wikispaces.com/Simplified+evaluation+function
class PieceSquareTable {
public:
    typedef unsigned char _t;
    _t pst[PieceType::Size][Square::Size];

public:
    PieceSquareTable () : pst {
        {
            E(900,-20),E(900,-10),E(900,-10),E(900, -5),E(900, -5),E(900,-10),E(900,-10),E(900,-20),
            E(900,-10),E(900,  0),E(900,  0),E(900,  0),E(900,  0),E(900,  0),E(900,  0),E(900,-10),
            E(900,-10),E(900,  0),E(900,  5),E(900,  5),E(900,  5),E(900,  5),E(900,  0),E(900,-10),
            E(900, -5),E(900,  0),E(900,  5),E(900,  5),E(900,  5),E(900,  5),E(900,  0),E(900, -5),
            E(900,  0),E(900,  0),E(900,  5),E(900,  5),E(900,  5),E(900,  5),E(900,  0),E(900, -5),
            E(900,-10),E(900,  5),E(900,  5),E(900,  5),E(900,  5),E(900,  5),E(900,  0),E(900,-10),
            E(900,-10),E(900,  0),E(900,  5),E(900,  0),E(900,  0),E(900,  0),E(900,  0),E(900,-10),
            E(900,-20),E(900,-10),E(900,-10),E(900, -5),E(900, -5),E(900,-10),E(900,-10),E(900,-20)
        },
        {
            E(500,  0),E(500,  0),E(500,  0),E(500,  0),E(500,  0),E(500,  0),E(500,  0),E(500,  0),
            E(500,  5),E(500, 10),E(500, 10),E(500, 10),E(500, 10),E(500, 10),E(500, 10),E(500,  5),
            E(500, -5),E(500,  0),E(500,  0),E(500,  0),E(500,  0),E(500,  0),E(500,  0),E(500, -5),
            E(500, -5),E(500,  0),E(500,  0),E(500,  0),E(500,  0),E(500,  0),E(500,  0),E(500, -5),
            E(500, -5),E(500,  0),E(500,  0),E(500,  0),E(500,  0),E(500,  0),E(500,  0),E(500, -5),
            E(500, -5),E(500,  0),E(500,  0),E(500,  0),E(500,  0),E(500,  0),E(500,  0),E(500, -5),
            E(500, -5),E(500,  0),E(500,  0),E(500,  0),E(500,  0),E(500,  0),E(500,  0),E(500, -5),
            E(500,  0),E(500,  0),E(500,  0),E(500,  5),E(500,  5),E(500,  0),E(500,  0),E(500,  0)
        },
        {
            E(330,-20),E(330,-10),E(330,-10),E(330,-10),E(330,-10),E(330,-10),E(330,-10),E(330,-20),
            E(330,-10),E(330,  0),E(330,  0),E(330,  0),E(330,  0),E(330,  0),E(330,  0),E(330,-10),
            E(330,-10),E(330,  0),E(330,  5),E(330, 10),E(330, 10),E(330,  5),E(330,  0),E(330,-10),
            E(330,-10),E(330,  5),E(330,  5),E(330, 10),E(330, 10),E(330,  5),E(330,  5),E(330,-10),
            E(330,-10),E(330,  0),E(330, 10),E(330, 10),E(330, 10),E(330, 10),E(330,  0),E(330,-10),
            E(330,-10),E(330, 10),E(330, 10),E(330, 10),E(330, 10),E(330, 10),E(330, 10),E(330,-10),
            E(330,-10),E(330,  5),E(330,  0),E(330,  0),E(330,  0),E(330,  0),E(330,  5),E(330,-10),
            E(330,-20),E(330,-10),E(330,-10),E(330,-10),E(330,-10),E(330,-10),E(330,-10),E(330,-20)
        },
        {
            E(320,-50),E(320,-40),E(320,-30),E(320,-30),E(320,-30),E(320,-30),E(320,-40),E(320,-50),
            E(320,-40),E(320,-20),E(320,  0),E(320,  0),E(320,  0),E(320,  0),E(320,-20),E(320,-40),
            E(320,-30),E(320,  0),E(320, 10),E(320, 15),E(320, 15),E(320, 10),E(320,  0),E(320,-30),
            E(320,-30),E(320,  5),E(320, 15),E(320, 20),E(320, 20),E(320, 15),E(320,  5),E(320,-30),
            E(320,-30),E(320,  0),E(320, 15),E(320, 20),E(320, 20),E(320, 15),E(320,  0),E(320,-30),
            E(320,-30),E(320,  5),E(320, 10),E(320, 15),E(320, 15),E(320, 10),E(320,  5),E(320,-30),
            E(320,-40),E(320,-20),E(320,  0),E(320,  5),E(320,  5),E(320,  0),E(320,-20),E(320,-40),
            E(320,-50),E(320,-40),E(320,-30),E(320,-30),E(320,-30),E(320,-30),E(320,-40),E(320,-50)
        },
        {
            E(100,  0),E(100,  0),E(100,  0),E(100,  0),E(100,  0),E(100,  0),E(100,  0),E(100,  0),
            E(100, 50),E(100, 50),E(100, 50),E(100, 50),E(100, 50),E(100, 50),E(100, 50),E(100, 50),
            E(100, 10),E(100, 10),E(100, 20),E(100, 30),E(100, 30),E(100, 20),E(100, 10),E(100, 10),
            E(100,  5),E(100,  5),E(100, 10),E(100, 25),E(100, 25),E(100, 10),E(100,  5),E(100,  5),
            E(100,  0),E(100,  0),E(100,  0),E(100, 20),E(100, 20),E(100,  0),E(100,  0),E(100,  0),
            E(100,  5),E(100, -5),E(100,-10),E(100,  0),E(100,  0),E(100,-10),E(100, -5),E(100,  5),
            E(100,  5),E(100, 10),E(100, 10),E(100,-20),E(100,-20),E(100, 10),E(100, 10),E(100,  5),
            E(100,  0),E(100,  0),E(100,  0),E(100,  0),E(100,  0),E(100,  0),E(100,  0),E(100,  0)
        },
        {
            E(100,-30),E(100,-40),E(100,-40),E(100,-50),E(100,-50),E(100,-40),E(100,-40),E(100,-30),
            E(100,-30),E(100,-40),E(100,-40),E(100,-50),E(100,-50),E(100,-40),E(100,-40),E(100,-30),
            E(100,-30),E(100,-40),E(100,-40),E(100,-50),E(100,-50),E(100,-40),E(100,-40),E(100,-30),
            E(100,-30),E(100,-40),E(100,-40),E(100,-50),E(100,-50),E(100,-40),E(100,-40),E(100,-30),
            E(100,-20),E(100,-30),E(100,-30),E(100,-40),E(100,-40),E(100,-30),E(100,-30),E(100,-20),
            E(100,-10),E(100,-20),E(100,-20),E(100,-20),E(100,-20),E(100,-20),E(100,-20),E(100,-10),
            E(100, 20),E(100, 20),E(100,  0),E(100,  0),E(100,  0),E(100,  0),E(100, 20),E(100, 20),
            E(100, 20),E(100, 30),E(100, 10),E(100,  0),E(100,  0),E(100, 10),E(100, 30),E(100, 20)
        },
        /*{
            E(100,-50),E(100,-40),E(100,-30),E(100,-20),E(100,-20),E(100,-30),E(100,-40),E(100,-50),
            E(100,-30),E(100,-20),E(100,-10),E(100,  0),E(100,  0),E(100,-10),E(100,-20),E(100,-30),
            E(100,-30),E(100,-10),E(100, 20),E(100, 30),E(100, 30),E(100, 20),E(100,-10),E(100,-30),
            E(100,-30),E(100,-10),E(100,-40),E(100,-50),E(100,-50),E(100,-40),E(100,-40),E(100,-30),
            E(100,-30),E(100,-10),E(100,-30),E(100,-40),E(100,-40),E(100,-30),E(100,-30),E(100,-30),
            E(100,-30),E(100,-10),E(100,-20),E(100,-20),E(100,-20),E(100,-20),E(100,-20),E(100,-30),
            E(100,-30),E(100,-30),E(100,  0),E(100,  0),E(100,  0),E(100,  0),E(100,-30),E(100,-30),
            E(100,-50),E(100,-30),E(100,-30),E(100,-30),E(100,-30),E(100,-30),E(100,-30),E(100,-50)
        }*/
    }
    {}

    const _t& operator() (PieceType ty, Square sq) const { return pst[ty][sq]; }
};

class Evaluation {
    static const PieceSquareTable pst;

public:
    typedef index_t _t;

private:
    _t _v;

public:
    Evaluation () : _v{} {}
    Evaluation (const Evaluation& e) : _v{e} {}
    explicit operator _t () const { return _v; }
    void clear() { _v = 0; }

    void drop(PieceType ty, Square to) { _v += pst(ty, to); }
    void clear(PieceType ty, Square from) { _v -= pst(ty, from); }
    void move(PieceType ty, Square from, Square to) { clear(ty, from); drop(ty, to); }

};

#endif
