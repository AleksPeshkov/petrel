#ifndef PIECE_SQUARE_TABLE_HPP
#define PIECE_SQUARE_TABLE_HPP

#include "Index.hpp"
#include "Square.hpp"

//http://chessprogramming.wikispaces.com/Simplified+evaluation+function
class PieceSquareTable {
    typedef PieceEvalType Index;

public:
    typedef unsigned char _t;
    Index::array< Square::array<_t> > pst;

    static constexpr _t e(unsigned m, signed s) { return static_cast<_t>((m + static_cast<unsigned>(s)) / 5); }

public:
    constexpr PieceSquareTable () : pst {{
        {
            e(900,-20),e(900,-10),e(900,-10),e(900, -5),e(900, -5),e(900,-10),e(900,-10),e(900,-20),
            e(900,-10),e(900,  0),e(900,  0),e(900,  0),e(900,  0),e(900,  0),e(900,  0),e(900,-10),
            e(900,-10),e(900,  0),e(900,  5),e(900,  5),e(900,  5),e(900,  5),e(900,  0),e(900,-10),
            e(900, -5),e(900,  0),e(900,  5),e(900,  5),e(900,  5),e(900,  5),e(900,  0),e(900, -5),
            e(900,  0),e(900,  0),e(900,  5),e(900,  5),e(900,  5),e(900,  5),e(900,  0),e(900, -5),
            e(900,-10),e(900,  5),e(900,  5),e(900,  5),e(900,  5),e(900,  5),e(900,  0),e(900,-10),
            e(900,-10),e(900,  0),e(900,  5),e(900,  0),e(900,  0),e(900,  0),e(900,  0),e(900,-10),
            e(900,-20),e(900,-10),e(900,-10),e(900, -5),e(900, -5),e(900,-10),e(900,-10),e(900,-20)
        },
        {
            e(500,  0),e(500,  0),e(500,  0),e(500,  0),e(500,  0),e(500,  0),e(500,  0),e(500,  0),
            e(500,  5),e(500, 10),e(500, 10),e(500, 10),e(500, 10),e(500, 10),e(500, 10),e(500,  5),
            e(500, -5),e(500,  0),e(500,  0),e(500,  0),e(500,  0),e(500,  0),e(500,  0),e(500, -5),
            e(500, -5),e(500,  0),e(500,  0),e(500,  0),e(500,  0),e(500,  0),e(500,  0),e(500, -5),
            e(500, -5),e(500,  0),e(500,  0),e(500,  0),e(500,  0),e(500,  0),e(500,  0),e(500, -5),
            e(500, -5),e(500,  0),e(500,  0),e(500,  0),e(500,  0),e(500,  0),e(500,  0),e(500, -5),
            e(500, -5),e(500,  0),e(500,  0),e(500,  0),e(500,  0),e(500,  0),e(500,  0),e(500, -5),
            e(500,  0),e(500,  0),e(500,  0),e(500,  5),e(500,  5),e(500,  0),e(500,  0),e(500,  0)
        },
        {
            e(330,-20),e(330,-10),e(330,-10),e(330,-10),e(330,-10),e(330,-10),e(330,-10),e(330,-20),
            e(330,-10),e(330,  0),e(330,  0),e(330,  0),e(330,  0),e(330,  0),e(330,  0),e(330,-10),
            e(330,-10),e(330,  0),e(330,  5),e(330, 10),e(330, 10),e(330,  5),e(330,  0),e(330,-10),
            e(330,-10),e(330,  5),e(330,  5),e(330, 10),e(330, 10),e(330,  5),e(330,  5),e(330,-10),
            e(330,-10),e(330,  0),e(330, 10),e(330, 10),e(330, 10),e(330, 10),e(330,  0),e(330,-10),
            e(330,-10),e(330, 10),e(330, 10),e(330, 10),e(330, 10),e(330, 10),e(330, 10),e(330,-10),
            e(330,-10),e(330,  5),e(330,  0),e(330,  0),e(330,  0),e(330,  0),e(330,  5),e(330,-10),
            e(330,-20),e(330,-10),e(330,-10),e(330,-10),e(330,-10),e(330,-10),e(330,-10),e(330,-20)
        },
        {
            e(320,-50),e(320,-40),e(320,-30),e(320,-30),e(320,-30),e(320,-30),e(320,-40),e(320,-50),
            e(320,-40),e(320,-20),e(320,  0),e(320,  0),e(320,  0),e(320,  0),e(320,-20),e(320,-40),
            e(320,-30),e(320,  0),e(320, 10),e(320, 15),e(320, 15),e(320, 10),e(320,  0),e(320,-30),
            e(320,-30),e(320,  5),e(320, 15),e(320, 20),e(320, 20),e(320, 15),e(320,  5),e(320,-30),
            e(320,-30),e(320,  0),e(320, 15),e(320, 20),e(320, 20),e(320, 15),e(320,  0),e(320,-30),
            e(320,-30),e(320,  5),e(320, 10),e(320, 15),e(320, 15),e(320, 10),e(320,  5),e(320,-30),
            e(320,-40),e(320,-20),e(320,  0),e(320,  5),e(320,  5),e(320,  0),e(320,-20),e(320,-40),
            e(320,-50),e(320,-40),e(320,-30),e(320,-30),e(320,-30),e(320,-30),e(320,-40),e(320,-50)
        },
        {
            e(100,  0),e(100,  0),e(100,  0),e(100,  0),e(100,  0),e(100,  0),e(100,  0),e(100,  0),
            e(100, 50),e(100, 50),e(100, 50),e(100, 50),e(100, 50),e(100, 50),e(100, 50),e(100, 50),
            e(100, 10),e(100, 10),e(100, 20),e(100, 30),e(100, 30),e(100, 20),e(100, 10),e(100, 10),
            e(100,  5),e(100,  5),e(100, 10),e(100, 25),e(100, 25),e(100, 10),e(100,  5),e(100,  5),
            e(100,  0),e(100,  0),e(100,  0),e(100, 20),e(100, 20),e(100,  0),e(100,  0),e(100,  0),
            e(100,  5),e(100, -5),e(100,-10),e(100,  0),e(100,  0),e(100,-10),e(100, -5),e(100,  5),
            e(100,  5),e(100, 10),e(100, 10),e(100,-20),e(100,-20),e(100, 10),e(100, 10),e(100,  5),
            e(100,  0),e(100,  0),e(100,  0),e(100,  0),e(100,  0),e(100,  0),e(100,  0),e(100,  0)
        },
        //king middlegame
        {
            e(100,-30),e(100,-40),e(100,-40),e(100,-50),e(100,-50),e(100,-40),e(100,-40),e(100,-30),
            e(100,-30),e(100,-40),e(100,-40),e(100,-50),e(100,-50),e(100,-40),e(100,-40),e(100,-30),
            e(100,-30),e(100,-40),e(100,-40),e(100,-50),e(100,-50),e(100,-40),e(100,-40),e(100,-30),
            e(100,-30),e(100,-40),e(100,-40),e(100,-50),e(100,-50),e(100,-40),e(100,-40),e(100,-30),
            e(100,-20),e(100,-30),e(100,-30),e(100,-40),e(100,-40),e(100,-30),e(100,-30),e(100,-20),
            e(100,-10),e(100,-20),e(100,-20),e(100,-20),e(100,-20),e(100,-20),e(100,-20),e(100,-10),
            e(100, 20),e(100, 20),e(100,  0),e(100,  0),e(100,  0),e(100,  0),e(100, 20),e(100, 20),
            e(100, 20),e(100, 30),e(100, 10),e(100,  0),e(100,  0),e(100, 10),e(100, 30),e(100, 20)
        },
        //King endgame:
        //Both sides have no queens or
        //Every side which has a queen has additionally no other pieces or one minorpiece maximum.
        {
            e(100,-50),e(100,-40),e(100,-30),e(100,-20),e(100,-20),e(100,-30),e(100,-40),e(100,-50),
            e(100,-30),e(100,-20),e(100,-10),e(100,  0),e(100,  0),e(100,-10),e(100,-20),e(100,-30),
            e(100,-30),e(100,-10),e(100, 20),e(100, 30),e(100, 30),e(100, 20),e(100,-10),e(100,-30),
            e(100,-30),e(100,-10),e(100,-40),e(100,-50),e(100,-50),e(100,-40),e(100,-40),e(100,-30),
            e(100,-30),e(100,-10),e(100,-30),e(100,-40),e(100,-40),e(100,-30),e(100,-30),e(100,-30),
            e(100,-30),e(100,-10),e(100,-20),e(100,-20),e(100,-20),e(100,-20),e(100,-20),e(100,-30),
            e(100,-30),e(100,-30),e(100,  0),e(100,  0),e(100,  0),e(100,  0),e(100,-30),e(100,-30),
            e(100,-50),e(100,-30),e(100,-30),e(100,-30),e(100,-30),e(100,-30),e(100,-30),e(100,-50)
        }
    }}
    {}

    constexpr const _t& operator() (Index::_t ty, Square sq) const { return pst[ty][sq]; }
};

#endif
