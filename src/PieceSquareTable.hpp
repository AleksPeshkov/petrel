#ifndef PIECE_SQUARE_TABLE_HPP
#define PIECE_SQUARE_TABLE_HPP

#include "Index.hpp"
#include "Square.hpp"

//https://www.chessprogramming.org/PeSTO%27s_Evaluation_Function
class PieceSquareTable {
public:
    typedef unsigned _t;

private:
    PieceType::arrayOf< Square::arrayOf<_t> > pst;

    /// @param pm piece middlegame value
    /// @param sm square middlegame adjustment
    /// @param pe piece endgame value
    /// @param se square endgame adjustment
    static constexpr _t e(signed pm, signed sm, signed pe, signed se) {
        return static_cast<_t>(pm + sm) | (static_cast<_t>(pe + se) << 16); }

public:
    constexpr PieceSquareTable () : pst {{
        { //queen
            e(1025,-28,936, -9),e(1025,  0,936, 22),e(1025, 29,936, 22),e(1025, 12,936, 27),e(1025, 59,936, 27),e(1025, 44,936, 19),e(1025, 43,936, 10),e(1025, 45,936, 20),
            e(1025,-24,936,-17),e(1025,-39,936, 20),e(1025, -5,936, 32),e(1025,  1,936, 41),e(1025,-16,936, 58),e(1025, 57,936, 25),e(1025, 28,936, 30),e(1025, 54,936,  0),
            e(1025,-13,936,-20),e(1025,-17,936,  6),e(1025,  7,936,  9),e(1025,  8,936, 49),e(1025, 29,936, 47),e(1025, 56,936, 35),e(1025, 47,936, 19),e(1025, 57,936,  9),
            e(1025,-27,936,  3),e(1025,-27,936, 22),e(1025,-16,936, 24),e(1025,-16,936, 45),e(1025, -1,936, 57),e(1025, 17,936, 40),e(1025, -2,936, 57),e(1025,  1,936, 36),
            e(1025, -9,936,-18),e(1025,-26,936, 28),e(1025, -9,936, 19),e(1025,-10,936, 47),e(1025, -2,936, 31),e(1025, -4,936, 34),e(1025,  3,936, 39),e(1025, -3,936, 23),
            e(1025,-14,936,-16),e(1025,  3,936,-27),e(1025,-11,936, 15),e(1025, -2,936,  6),e(1025, -5,936,  9),e(1025,  2,936, 17),e(1025, 14,936, 10),e(1025,  5,936,  5),
            e(1025,-35,936,-22),e(1025, -8,936,-23),e(1025, 11,936,-30),e(1025,  2,936,-16),e(1025,  8,936,-16),e(1025, 15,936,-23),e(1025, -3,936,-36),e(1025,  1,936,-32),
            e(1025, -1,936,-33),e(1025,-18,936,-28),e(1025, -9,936,-22),e(1025, 10,936,-43),e(1025,-15,936, -5),e(1025,-25,936,-32),e(1025,-31,936,-20),e(1025,-50,936,-41),
        },
        { //rook
            e(477,  32,512, 13),e(477,  42,512, 10),e(477,  32,512, 18),e(477,  51,512, 15),e(477,  63,512, 12),e(477,   9,512, 12),e(477,  31,512,  8),e(477,  43,512,  3),
            e(477,  27,512, 11),e(477,  32,512, 13),e(477,  58,512, 13),e(477,  62,512, 11),e(477,  80,512, -3),e(477,  67,512,  3),e(477,  26,512,  8),e(477,  44,512,  3),
            e(477,  -5,512,  7),e(477,  19,512,  7),e(477,  26,512,  7),e(477,  36,512,  5),e(477,  17,512,  4),e(477,  45,512, -3),e(477,  61,512, -5),e(477,  16,512, -3),
            e(477, -24,512,  4),e(477, -11,512,  3),e(477,   7,512, 13),e(477,  26,512,  1),e(477,  24,512,  2),e(477,  35,512,  1),e(477,  -8,512, -1),e(477, -20,512,  2),
            e(477, -36,512,  3),e(477, -26,512,  5),e(477, -12,512,  8),e(477,  -1,512,  4),e(477,   9,512, -5),e(477,  -7,512, -6),e(477,   6,512, -8),e(477, -23,512,-11),
            e(477, -45,512, -4),e(477, -25,512,  0),e(477, -16,512, -5),e(477, -17,512, -1),e(477,   3,512, -7),e(477,   0,512,-12),e(477,  -5,512, -8),e(477,  33,512,-16),
            e(477, -44,512, -6),e(477, -16,512, -6),e(477, -20,512,  0),e(477,  -9,512,  2),e(477,  -1,512, -9),e(477,  11,512, -9),e(477,  -6,512,-11),e(477, -71,512,  3),
            e(477, -19,512, -9),e(477, -13,512,  2),e(477,   1,512,  3),e(477,  17,512, -1),e(477,  16,512, -5),e(477,   7,512,-13),e(477, -37,512,  4),e(477, -26,512,-20),
        },
        { //bishop
            e(365, -29,297,-14),e(365,   4,297,-21),e(365, -82,297,-11),e(365, -37,297, -8),e(365, -25,297, -7),e(365, -42,297, -9),e(365,   7,297,-17),e(365,  -8,297,-24),
            e(365, -26,297, -8),e(365,  16,297, -4),e(365, -18,297,  7),e(365, -13,297,-12),e(365,  30,297, -3),e(365,  59,297,-13),e(365,  18,297, -4),e(365, -47,297,-14),
            e(365, -16,297,  2),e(365,  37,297, -8),e(365,  43,297,  0),e(365,  40,297, -1),e(365,  35,297, -2),e(365,  50,297,  6),e(365,  37,297,  0),e(365,  -2,297,  4),
            e(365,  -4,297, -3),e(365,   5,297,  9),e(365,  19,297, 12),e(365,  50,297,  9),e(365,  37,297, 14),e(365,  37,297, 10),e(365,   7,297,  3),e(365,  -2,297,  2),
            e(365,  -6,297, -6),e(365,  13,297,  3),e(365,  13,297, 13),e(365,  26,297, 19),e(365,  34,297,  7),e(365,  12,297, 10),e(365,  10,297, -3),e(365,   4,297, -9),
            e(365,   0,297,-12),e(365,  15,297, -3),e(365,  15,297,  8),e(365,  15,297, 10),e(365,  14,297, 13),e(365,  27,297,  3),e(365,  18,297, -7),e(365,  10,297,-15),
            e(365,   4,297,-14),e(365,  15,297,-18),e(365,  16,297, -7),e(365,   0,297, -1),e(365,   7,297,  4),e(365,  21,297, -9),e(365,  33,297,-15),e(365,   1,297,-27),
            e(365, -33,297,-23),e(365,  -3,297, -9),e(365, -14,297,-23),e(365, -21,297, -5),e(365, -13,297, -9),e(365, -12,297,-16),e(365, -39,297, -5),e(365, -21,297,-17),
        },
        { //knight
            e(337,-167,281,-58),e(337, -89,281,-38),e(337, -34,281,-13),e(337, -49,281,-28),e(337,  61,281,-31),e(337, -97,281,-27),e(337, -15,281,-63),e(337,-107,281,-99),
            e(337, -73,281,-25),e(337, -41,281, -8),e(337,  72,281,-25),e(337,  36,281, -2),e(337,  23,281, -9),e(337,  62,281,-25),e(337,   7,281,-24),e(337, -17,281,-52),
            e(337, -47,281,-24),e(337,  60,281,-20),e(337,  37,281, 10),e(337,  65,281,  9),e(337,  84,281, -1),e(337, 129,281, -9),e(337,  73,281,-19),e(337,  44,281,-41),
            e(337,  -9,281,-17),e(337,  17,281,  3),e(337,  19,281, 22),e(337,  53,281, 22),e(337,  37,281, 22),e(337,  69,281, 11),e(337,  18,281,  8),e(337,  22,281,-18),
            e(337, -13,281,-18),e(337,   4,281, -6),e(337,  16,281, 16),e(337,  13,281, 25),e(337,  28,281, 16),e(337,  19,281, 17),e(337,  21,281,  4),e(337,  -8,281,-18),
            e(337, -23,281,-23),e(337,  -9,281, -3),e(337,  12,281, -1),e(337,  10,281, 15),e(337,  19,281, 10),e(337,  17,281, -3),e(337,  25,281,-20),e(337, -16,281,-22),
            e(337, -29,281,-42),e(337, -53,281,-20),e(337, -12,281,-10),e(337,  -3,281, -5),e(337,  -1,281, -2),e(337,  18,281,-20),e(337, -14,281,-23),e(337, -19,281,-44),
            e(337,-105,281,-29),e(337, -21,281,-51),e(337, -58,281,-23),e(337, -33,281,-15),e(337, -17,281,-22),e(337, -28,281,-18),e(337, -19,281,-50),e(337, -23,281,-64),
        },
        { //pawn
            e(0,     0,0,    0),e(0,     0,0,    0),e(0,     0,0,    0),e(0,     0,0,    0),e(0,     0,0,    0),e(0,     0,0,    0),e(0,     0,0,    0),e(0,     0,0,    0),
            e(82,   98,94, 178),e(82,  134,94, 173),e(82,   61,94, 158),e(82,   95,94, 134),e(82,   68,94, 147),e(82,  126,94, 132),e(82,   34,94, 165),e(82,  -11,94, 187),
            e(82,   -6,94,  94),e(82,    7,94, 100),e(82,   26,94,  85),e(82,   31,94,  67),e(82,   65,94,  56),e(82,   56,94,  53),e(82,   25,94,  82),e(82,  -20,94,  84),
            e(82,  -14,94,  32),e(82,   13,94,  24),e(82,    6,94,  13),e(82,   21,94,   5),e(82,   23,94,  -2),e(82,   12,94,   4),e(82,   17,94,  17),e(82,  -23,94,  17),
            e(82,  -27,94,  13),e(82,   -2,94,  13),e(82,   -5,94,  -3),e(82,   12,94,  -7),e(82,   17,94,  -7),e(82,    6,94,  -8),e(82,   10,94,   3),e(82,  -25,94,  -1),
            e(82,  -26,94,   4),e(82,   -4,94,   7),e(82,   -4,94,  -6),e(82,  -10,94,   1),e(82,    3,94,   0),e(82,    3,94,  -5),e(82,   33,94,  -1),e(82,  -12,94,  -8),
            e(82,  -35,94,  13),e(82,   -1,94,   8),e(82,  -20,94,   8),e(82,  -23,94,  10),e(82,  -15,94,  13),e(82,   24,94,   0),e(82,   38,94,   2),e(82,  -22,94,  -7),
            e(0,     0,0,    0),e(0,     0,0,    0),e(0,     0,0,    0),e(0,     0,0,    0),e(0,     0,0,    0),e(0,     0,0,    0),e(0,     0,0,    0),e(0,     0,0,    0),
        },
        { //king
            e(99,  -65,99, -74),e(99,   23,99, -35),e(99,   16,99, -18),e(99,  -15,99, -18),e(99,  -56,99, -11),e(99,  -34,99,  15),e(99,    2,99,   4),e(99,   13,99, -17),
            e(99,   29,99, -12),e(99,   -1,99,  17),e(99,  -20,99,  14),e(99,   -7,99,  17),e(99,   -8,99,  17),e(99,   -4,99,  38),e(99,  -38,99,  23),e(99,  -29,99,  11),
            e(99,   -9,99,  10),e(99,   24,99,  17),e(99,    2,99,  23),e(99,  -16,99,  15),e(99,  -20,99,  20),e(99,    6,99,  45),e(99,   22,99,  44),e(99,  -22,99,  13),
            e(99,  -17,99,  -8),e(99,  -20,99,  22),e(99,  -12,99,  24),e(99,  -27,99,  27),e(99,  -30,99,  26),e(99,  -25,99,  33),e(99,  -14,99,  26),e(99,  -36,99,   3),
            e(99,  -49,99, -18),e(99,   -1,99,  -4),e(99,  -27,99,  21),e(99,  -39,99,  24),e(99,  -46,99,  27),e(99,  -44,99,  23),e(99,  -33,99,   9),e(99,  -51,99, -11),
            e(99,  -14,99, -19),e(99,  -14,99,  -3),e(99,  -22,99,  11),e(99,  -46,99,  21),e(99,  -44,99,  23),e(99,  -30,99,  16),e(99,  -15,99,   7),e(99,  -27,99,  -9),
            e(99,    1,99, -27),e(99,    7,99, -11),e(99,   -8,99,   4),e(99,  -64,99,  13),e(99,  -43,99,  14),e(99,  -16,99,   4),e(99,    9,99,  -5),e(99,    8,99, -17),
            e(99,  -15,99, -53),e(99,   36,99, -34),e(99,   12,99, -21),e(99,  -54,99, -11),e(99,    8,99, -28),e(99,  -28,99, -14),e(99,   24,99, -24),e(99,   14,99, -43),
        },
    }}
    {}

    constexpr const _t& operator() (PieceType ty, Square sq) const { return pst[ty][sq]; }
};

extern const PieceSquareTable pieceSquareTable;

#endif
